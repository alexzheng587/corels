!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CacheEntry	branch_bound.py	/^class CacheEntry:$/;"	c
CacheEntry	serial.py	/^from branch_bound import CacheEntry, initialize, compute_default$/;"	i
CacheEntry	serial_lazy.py	/^from branch_bound import CacheEntry, initialize, compute_default$/;"	i
G	explore.py	/^G = utils.make_graph(range(nrules), commuting_pairs)$/;"	v
PrefixCache	branch_bound.py	/^class PrefixCache(dict):$/;"	c
__init__	branch_bound.py	/^    def __init__(self, prefix=None, prediction=None, default_rule=None,$/;"	m	class:CacheEntry
__init__	rule.py	/^	def __init__(self, name, num, truthtable):$/;"	m	class:rule
__init__	rule.py	/^	def __init__(self, nrules, rules):$/;"	m	class:ruleset
__repr__	branch_bound.py	/^    def __repr__(self):$/;"	m	class:CacheEntry	file:
accuracy	serial.py	/^    accuracy = float(num_already_correct + num_captured_correct +$/;"	v
accuracy	serial_lazy.py	/^                                           accuracy=accuracy,$/;"	v
accuracy	serial_lazy.py	/^            accuracy = float(num_already_correct + num_captured_correct +$/;"	v
array_to_string	utils.py	/^def array_to_string(x):$/;"	f
best_prefix	explore.py	/^best_prefix = None$/;"	v
best_prefix	hongyu.py	/^best_prefix = None$/;"	v
best_prefix	serial.py	/^        best_prefix = prefix$/;"	v
best_prefix	serial.py	/^best_prefix = None$/;"	v
best_prefix	serial_gc.py	/^best_prefix = None$/;"	v
best_prefix	serial_lazy.py	/^                    best_prefix = prefix$/;"	v
best_prefix	serial_lazy.py	/^best_prefix = None$/;"	v
c	serial_gc.py	/^c = 0.$/;"	v
c	serial_gc.py	/^c = 10.$/;"	v
cache_size	serial_gc.py	/^cache_size = np.zeros(m, int)$/;"	v
cache_size	serial_lazy.py	/^cache_size = np.zeros(max_prefix_length + 1, int)$/;"	v
cached_prediction	serial_gc.py	/^        cached_prediction = cached_prefix.prediction$/;"	v
cached_prefix	serial.py	/^    cached_prefix = cache[prefix[:-1]]$/;"	v
cached_prefix	serial_gc.py	/^        cached_prefix = cache[prefix_start]$/;"	v
cached_prefix	serial_lazy.py	/^        cached_prefix = cache[prefix_start]$/;"	v
captured_nz	serial.py	/^    captured_nz = (not_yet_captured & rules[new_rule]).nonzero()[0]$/;"	v
captured_nz	serial_lazy.py	/^            captured_nz = (not_yet_captured & rules[new_rule]).nonzero()[0]$/;"	v
captured_zero	serial_gc.py	/^captured_zero = np.zeros(m, int)$/;"	v
cc	serial_gc.py	/^    cc = cache[best_prefix]$/;"	v
cdict	serial_gc.py	/^cdict = utils.commuting_dict(commuting_pairs, nrules)$/;"	v
clique_lengths	explore.py	/^clique_lengths = [len(c) for c in cliques]$/;"	v
cliques	explore.py	/^cliques = list(nx.find_cliques(G))$/;"	v
commutes	serial_gc.py	/^commutes = np.zeros(m, int)$/;"	v
commuting_dict	utils.py	/^def commuting_dict(commuting_pairs, n):$/;"	f
commuting_pairs	explore.py	/^commuting_pairs = utils.find_commuting_pairs(x)$/;"	v
commuting_pairs	serial_gc.py	/^commuting_pairs = utils.find_commuting_pairs(x)$/;"	v
compute_default	branch_bound.py	/^def compute_default(ones, uncaptured):$/;"	f
compute_default	serial.py	/^from branch_bound import CacheEntry, initialize, compute_default$/;"	i
compute_default	serial_lazy.py	/^from branch_bound import CacheEntry, initialize, compute_default$/;"	i
count_corr	rule.py	/^def count_corr(rs):$/;"	f
count_ones	rule.py	/^def count_ones(tt):$/;"	f
data_points	viz.py	/^def data_points(prefix, rule_names=None, ndata=None, rules=None, ones=None,$/;"	f
data_redundancy	viz.py	/^def data_redundancy(prefix, cache, ndata=None, rules=None, ones=None, fs=14, lw=3):$/;"	f
dead_prefix	serial_gc.py	/^dead_prefix = np.zeros(m, int)$/;"	v
dead_prefix_start	serial_gc.py	/^dead_prefix_start = np.zeros(m, int)$/;"	v
default_rule	serial_lazy.py	/^                                           default_rule=default_rule,$/;"	v
delimiter	explore.py	/^delimiter = '\\t'$/;"	v
delimiter	hongyu.py	/^delimiter = '\\t'$/;"	v
delimiter	serial.py	/^delimiter = '\\t'$/;"	v
delimiter	serial_gc.py	/^delimiter = '\\t'$/;"	v
delimiter	serial_lazy.py	/^delimiter = '\\t'$/;"	v
dfigs	serial_gc.py	/^dfigs = os.path.join('..', 'figs')$/;"	v
din	explore.py	/^din = os.path.join('..', 'data')$/;"	v
din	figs.py	/^din = os.path.join('..', 'cache')$/;"	v
din	hongyu.py	/^din = os.path.join('..', 'data')$/;"	v
din	serial.py	/^din = os.path.join('..', 'data')$/;"	v
din	serial_gc.py	/^din = os.path.join('..', 'data')$/;"	v
din	serial_lazy.py	/^din = os.path.join('..', 'data')$/;"	v
dout	explore.py	/^dout = os.path.join('..', 'cache')$/;"	v
dout	figs.py	/^dout = os.path.join('..', 'figs')$/;"	v
dout	hongyu.py	/^dout = os.path.join('..', 'cache')$/;"	v
dout	serial.py	/^dout = os.path.join('..', 'cache')$/;"	v
dout	serial_gc.py	/^dout = os.path.join('..', 'cache')$/;"	v
dout	serial_lazy.py	/^dout = os.path.join('..', 'cache')$/;"	v
draw_graph	viz.py	/^def draw_graph(edges, fig=None, fdir=None, froot=None, fontsize=18,$/;"	f
figs	serial_gc.py	/^import figs$/;"	i
file_to_dict	branch_bound.py	/^def file_to_dict(fname, seed=None, sample=None):$/;"	f
find_commuting_pairs	utils.py	/^def find_commuting_pairs(x):$/;"	f
first_rule	branch_bound.py	/^    def first_rule(self):$/;"	m	class:CacheEntry
fname	serial.py	/^fname = os.path.join(dout, 'serial-max_accuracy=%1.3f-max_length=%d.txt' %$/;"	v
fname	serial_gc.py	/^fname = os.path.join(dout, '%s.txt' % metadata)$/;"	v
fname	serial_lazy.py	/^fname = os.path.join(dout, 'serial_lazy-max_accuracy=%1.3f-max_length=%d.txt' %$/;"	v
fraction_captured_ones	serial.py	/^    fraction_captured_ones = float(num_captured_ones) \/ num_captured$/;"	v
fraction_captured_ones	serial_lazy.py	/^            fraction_captured_ones = float(num_captured_ones) \/ num_captured$/;"	v
froot	explore.py	/^froot = 'adult_R'$/;"	v
froot	hongyu.py	/^froot = 'adult_R'$/;"	v
froot	serial_gc.py	/^froot = 'adult_R'$/;"	v
froot	serial_gc.py	/^froot = 'tdata_R'$/;"	v
garbage_collect	explore.py	/^garbage_collect = False$/;"	v
garbage_collect	hongyu.py	/^garbage_collect = False$/;"	v
garbage_collect	serial_gc.py	/^garbage_collect = True$/;"	v
get_not_captured	branch_bound.py	/^    def get_not_captured(self):$/;"	m	class:CacheEntry
given_prefix	branch_bound.py	/^def given_prefix(full_prefix, cache, rules, ones, ndata, max_accuracy=0.,$/;"	f
given_prefix	hongyu.py	/^from branch_bound import initialize, given_prefix, print_rule_list$/;"	i
given_prefix	serial_gc.py	/^from branch_bound import given_prefix, initialize, incremental, print_rule_list$/;"	i
gmpy2	branch_bound.py	/^import gmpy2$/;"	i
gmpy2	rule.py	/^import gmpy2$/;"	i
gmpy2	serial_gc.py	/^import gmpy2$/;"	i
greedy_rule_list	branch_bound.py	/^def greedy_rule_list(ones, rules, max_length):$/;"	f
incremental	branch_bound.py	/^def incremental(cache, prefix, rules, ones, ndata, num_already_captured,$/;"	f
incremental	serial_gc.py	/^from branch_bound import given_prefix, initialize, incremental, print_rule_list$/;"	i
inferior	serial_gc.py	/^inferior = np.zeros(m, int)$/;"	v
initialize	branch_bound.py	/^def initialize(din, dout, label_file, out_file, warm_start, max_accuracy,$/;"	f
initialize	explore.py	/^from branch_bound import initialize$/;"	i
initialize	hongyu.py	/^from branch_bound import initialize, given_prefix, print_rule_list$/;"	i
initialize	serial.py	/^from branch_bound import CacheEntry, initialize, compute_default$/;"	i
initialize	serial_gc.py	/^from branch_bound import given_prefix, initialize, incremental, print_rule_list$/;"	i
initialize	serial_lazy.py	/^from branch_bound import CacheEntry, initialize, compute_default$/;"	i
label_file	explore.py	/^label_file = '%s.label' % froot$/;"	v
label_file	hongyu.py	/^label_file = '%s.label' % froot$/;"	v
label_file	serial.py	/^label_file = 'tdata_R.label'$/;"	v
label_file	serial_gc.py	/^label_file = '%s.label' % froot$/;"	v
label_file	serial_lazy.py	/^label_file = 'tdata_R.label'$/;"	v
labels	rule.py	/^labels = None$/;"	v
last_rule	serial_gc.py	/^            last_rule = prefix_start[-1]$/;"	v
lead_one	rule.py	/^lead_one = None$/;"	v
m	serial_gc.py	/^m = max_prefix_length + 1$/;"	v
make_all_ones	rule.py	/^def make_all_ones(length):$/;"	f
make_default	rule.py	/^def make_default(length, prefix):$/;"	f
make_figure	figs.py	/^def make_figure(metadata, din, dout, max_accuracy, max_length, delimiter='\\t',$/;"	f
make_graph	utils.py	/^def make_graph(nodes, edges):$/;"	f
matplotlib	explore.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	hongyu.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	viz.py	/^import matplotlib.pyplot as plt$/;"	i
max_accuracy	explore.py	/^max_accuracy = 0$/;"	v
max_accuracy	hongyu.py	/^max_accuracy = 0$/;"	v
max_accuracy	serial.py	/^        max_accuracy = accuracy$/;"	v
max_accuracy	serial.py	/^max_accuracy = None$/;"	v
max_accuracy	serial_gc.py	/^max_accuracy = 0.999$/;"	v
max_accuracy	serial_gc.py	/^max_accuracy = None #0.83 # 0.835438$/;"	v
max_accuracy	serial_lazy.py	/^                    max_accuracy = accuracy$/;"	v
max_accuracy	serial_lazy.py	/^max_accuracy = 0.999$/;"	v
max_prefix_length	serial.py	/^max_prefix_length = 2$/;"	v
max_prefix_length	serial_gc.py	/^max_prefix_length = 4$/;"	v
max_prefix_length	serial_gc.py	/^max_prefix_length = 8$/;"	v
max_prefix_length	serial_lazy.py	/^max_prefix_length = 5$/;"	v
metadata	serial_gc.py	/^metadata = ('%s-serial_gc-max_accuracy=%1.3f-max_length=%d' %$/;"	v
min_objective	serial_gc.py	/^min_objective = 1.$/;"	v
min_objective	serial_gc.py	/^min_objective = None # 673. #512.$/;"	v
mpz	branch_bound.py	/^from gmpy2 import mpz$/;"	i
mpz	rule.py	/^from gmpy2 import mpz$/;"	i
mpz	serial_gc.py	/^from gmpy2 import mpz$/;"	i
mpz_to_array	utils.py	/^def mpz_to_array(x):$/;"	f
mpz_to_string	utils.py	/^def mpz_to_string(x):$/;"	f
new_num_captured	serial.py	/^        new_num_captured = num_already_captured + num_captured$/;"	v
new_num_captured	serial_lazy.py	/^                new_num_captured = num_already_captured + num_captured$/;"	v
new_rule	serial.py	/^    new_rule = prefix[-1]$/;"	v
new_rule	serial_lazy.py	/^            new_rule = prefix[-1]$/;"	v
not_captured	serial.py	/^                                   not_captured=not_captured)$/;"	v
not_captured	serial.py	/^    not_captured = not_yet_captured & (1 - rules[new_rule])$/;"	v
not_captured	serial_lazy.py	/^                                           not_captured=not_captured)$/;"	v
not_captured	serial_lazy.py	/^            not_captured = not_yet_captured & (1 - rules[new_rule])$/;"	v
not_captured_nz	serial.py	/^    not_captured_nz = (not_captured).nonzero()[0]$/;"	v
not_captured_nz	serial_lazy.py	/^            not_captured_nz = (not_captured).nonzero()[0]$/;"	v
not_yet_captured	serial.py	/^    not_yet_captured = cached_prefix.get_not_captured()$/;"	v
not_yet_captured	serial_gc.py	/^        not_yet_captured = cached_prefix.get_not_captured()$/;"	v
not_yet_captured	serial_lazy.py	/^        not_yet_captured = cached_prefix.get_not_captured()$/;"	v
np	branch_bound.py	/^import numpy as np$/;"	i
np	explore.py	/^import numpy as np$/;"	i
np	hongyu.py	/^import numpy as np$/;"	i
np	serial.py	/^import numpy as np$/;"	i
np	serial_gc.py	/^import numpy as np$/;"	i
np	serial_lazy.py	/^import numpy as np$/;"	i
np	utils.py	/^import numpy as np$/;"	i
np	viz.py	/^import numpy as np$/;"	i
num_already_captured	serial.py	/^    num_already_captured = cached_prefix.num_captured$/;"	v
num_already_captured	serial_gc.py	/^        num_already_captured = cached_prefix.num_captured$/;"	v
num_already_captured	serial_lazy.py	/^        num_already_captured = cached_prefix.num_captured$/;"	v
num_already_correct	serial.py	/^    num_already_correct = cached_prefix.num_captured_correct$/;"	v
num_already_correct	serial_gc.py	/^        num_already_correct = cached_prefix.num_captured_correct$/;"	v
num_already_correct	serial_lazy.py	/^        num_already_correct = cached_prefix.num_captured_correct$/;"	v
num_captured	serial.py	/^                                   num_captured=new_num_captured,$/;"	v
num_captured	serial.py	/^    num_captured = len(captured_nz)$/;"	v
num_captured	serial_lazy.py	/^                                           num_captured=new_num_captured,$/;"	v
num_captured	serial_lazy.py	/^            num_captured = len(captured_nz)$/;"	v
num_captured_correct	serial.py	/^                                   num_captured_correct=num_correct,$/;"	v
num_captured_correct	serial.py	/^        num_captured_correct = num_captured - num_captured_ones$/;"	v
num_captured_correct	serial.py	/^        num_captured_correct = num_captured_ones$/;"	v
num_captured_correct	serial_lazy.py	/^                                           num_captured_correct=num_correct,$/;"	v
num_captured_correct	serial_lazy.py	/^                num_captured_correct = num_captured - num_captured_ones$/;"	v
num_captured_correct	serial_lazy.py	/^                num_captured_correct = num_captured_ones$/;"	v
num_captured_ones	serial.py	/^    num_captured_ones = ones[captured_nz].sum()$/;"	v
num_captured_ones	serial_lazy.py	/^            num_captured_ones = ones[captured_nz].sum()$/;"	v
num_correct	serial.py	/^        num_correct = num_already_correct + num_captured_correct$/;"	v
num_correct	serial_lazy.py	/^                num_correct = num_already_correct + num_captured_correct$/;"	v
num_not_captured	branch_bound.py	/^    def num_not_captured(self):$/;"	m	class:CacheEntry
num_not_captured	serial.py	/^    num_not_captured = len(not_captured_nz)$/;"	v
num_not_captured	serial_lazy.py	/^            num_not_captured = len(not_captured_nz)$/;"	v
nx	explore.py	/^import networkx as nx$/;"	i
nx	utils.py	/^    import networkx as nx$/;"	i
nx	viz.py	/^    import networkx as nx$/;"	i
os	branch_bound.py	/^import os$/;"	i
os	explore.py	/^import os$/;"	i
os	figs.py	/^import os$/;"	i
os	hongyu.py	/^import os$/;"	i
os	serial.py	/^import os$/;"	i
os	serial_gc.py	/^import os$/;"	i
os	serial_lazy.py	/^import os$/;"	i
out_file	explore.py	/^out_file = '%s.out' % froot$/;"	v
out_file	hongyu.py	/^out_file = '%s.out' % froot$/;"	v
out_file	serial.py	/^out_file = 'tdata_R.out'$/;"	v
out_file	serial_gc.py	/^out_file = '%s.out' % froot$/;"	v
out_file	serial_lazy.py	/^out_file = 'tdata_R.out'$/;"	v
parse	rule.py	/^def parse(filename):$/;"	f
pdict	serial_gc.py	/^    pdict = {}$/;"	v
pfx	serial_gc.py	/^    pfx = (43, 69, 122, 121)$/;"	v
plt	explore.py	/^import matplotlib.pyplot as plt$/;"	i
plt	hongyu.py	/^import matplotlib.pyplot as plt$/;"	i
plt	viz.py	/^import matplotlib.pyplot as plt$/;"	i
prediction	serial.py	/^        prediction = cached_prefix.prediction + (0,)$/;"	v
prediction	serial.py	/^        prediction = cached_prefix.prediction + (1,)$/;"	v
prediction	serial_lazy.py	/^                prediction = cached_prefix.prediction + (0,)$/;"	v
prediction	serial_lazy.py	/^                prediction = cached_prefix.prediction + (1,)$/;"	v
prefix	hongyu.py	/^prefix = (45, 35, 77, 33, 134, 69, 68, 121, 86, 82, 97, 122, 59, 113, 210, 181, 166, 257)$/;"	v
prefix	hongyu.py	/^prefix = (45, 77, 35, 33, 69, 121, 86, 97, 221, 122, 59, 54, 169, 180)$/;"	v
prefix	serial.py	/^    prefix = queue.pop(0)$/;"	v
prefix	serial_gc.py	/^            prefix = queue.pop(0)$/;"	v
prefix	serial_lazy.py	/^            prefix = queue.pop(0)$/;"	v
prefix_list	serial_gc.py	/^    prefix_list = [p for p in cache if (len(p) == (i - 1))]$/;"	v
prefix_list	serial_lazy.py	/^    prefix_list = [p for p in cache.keys() if (len(p) == (i - 1))]$/;"	v
prefix_summary	viz.py	/^def prefix_summary(prefix, cache, rule_names, ndata, rules, ones):$/;"	f
prefix_trace	viz.py	/^def prefix_trace(prefix, cache, rule_names=None, ndata=None, rules=None,$/;"	f
print_not_captured	branch_bound.py	/^    def print_not_captured(self):$/;"	m	class:CacheEntry
print_rule_list	branch_bound.py	/^def print_rule_list(prefix, prediction, default_rule, rule_names):$/;"	f
print_rule_list	hongyu.py	/^from branch_bound import initialize, given_prefix, print_rule_list$/;"	i
print_rule_list	serial_gc.py	/^from branch_bound import given_prefix, initialize, incremental, print_rule_list$/;"	i
print_rule_list	viz.py	/^from branch_bound import print_rule_list$/;"	i
pylab	figs.py	/^import pylab$/;"	i
queue	serial.py	/^queue = [(r,) for r in range(len(rules))]$/;"	v
queue	serial_gc.py	/^        queue = [prefix_start + (t,) for t in list(rules_to_consider)]$/;"	v
queue	serial_gc.py	/^queue = []$/;"	v
queue	serial_lazy.py	/^        queue = [prefix_start + (t,) for t in list(rule_set.difference(set(p)))]$/;"	v
queue	serial_lazy.py	/^queue = []$/;"	v
quiet	explore.py	/^quiet = True$/;"	v
quiet	hongyu.py	/^quiet = True$/;"	v
quiet	serial_gc.py	/^quiet = True$/;"	v
re	rule.py	/^import re$/;"	i
read_data	branch_bound.py	/^def read_data(fname, seed=None, sample=None):$/;"	f
rtc	serial_gc.py	/^            rtc = rules_to_consider.difference(set(cdict[last_rule]))$/;"	v
rule	branch_bound.py	/^import rule$/;"	i
rule	rule.py	/^class rule(object):$/;"	c
rule	serial_gc.py	/^import rule$/;"	i
rule_copy	rule.py	/^def rule_copy(r):$/;"	f
rule_isset	rule.py	/^def rule_isset(tt, ind):$/;"	f
rule_print	rule.py	/^def rule_print(r, verbose=False):$/;"	f
rule_vand	rule.py	/^def rule_vand(tt1, tt2):$/;"	f
rule_vandnot	rule.py	/^def rule_vandnot(tt1, tt2):$/;"	f
rule_vector_print	rule.py	/^def rule_vector_print(r):$/;"	f
rule_vor	rule.py	/^def rule_vor(tt1, tt2):$/;"	f
rules_init	rule.py	/^def rules_init(xs, ys): $/;"	f
rules_to_array	utils.py	/^def rules_to_array(x):$/;"	f
rules_to_consider	serial_gc.py	/^            rules_to_consider = rtc$/;"	v
rules_to_consider	serial_gc.py	/^        rules_to_consider = rule_set.difference(set(prefix_start))$/;"	v
ruleset	rule.py	/^class ruleset(object):$/;"	c
ruleset_add	rule.py	/^def ruleset_add(rs, rule):$/;"	f
ruleset_delete	rule.py	/^def ruleset_delete(rs, rule):$/;"	f
ruleset_init	rule.py	/^def ruleset_init(rules):$/;"	f
ruleset_print	rule.py	/^def ruleset_print(rs):$/;"	f
sample	explore.py	/^sample = None$/;"	v
sample	hongyu.py	/^sample = None$/;"	v
sample	serial_gc.py	/^sample = 0.1$/;"	v
sample	serial_gc.py	/^sample = None$/;"	v
scl	explore.py	/^scl = set(clique_lengths)$/;"	v
seconds	serial_gc.py	/^seconds = np.zeros(m)$/;"	v
seed	explore.py	/^seed = None$/;"	v
seed	hongyu.py	/^seed = None$/;"	v
seed	serial_gc.py	/^seed = 0$/;"	v
seed	serial_gc.py	/^seed = None$/;"	v
stunted_prefix	serial_gc.py	/^stunted_prefix = np.zeros(m, int)$/;"	v
sublists	utils.py	/^def sublists(s, min_length=2):$/;"	f
sys	rule.py	/^import sys$/;"	i
tb	branch_bound.py	/^import tabular as tb$/;"	i
tb	figs.py	/^import tabular as tb$/;"	i
tb	serial.py	/^import tabular as tb$/;"	i
tb	serial_gc.py	/^import tabular as tb$/;"	i
tb	serial_lazy.py	/^import tabular as tb$/;"	i
tic	serial_gc.py	/^    tic = time.time()$/;"	v
time	serial_gc.py	/^import time$/;"	i
to_file	branch_bound.py	/^    def to_file(self, fname, delimiter='\\t'):$/;"	m	class:PrefixCache
to_kvpairs	branch_bound.py	/^    def to_kvpairs(self):$/;"	m	class:CacheEntry
to_record	branch_bound.py	/^    def to_record(self):$/;"	m	class:CacheEntry
to_string	branch_bound.py	/^    def to_string(self):$/;"	m	class:CacheEntry
upper_bound	serial.py	/^                                   upper_bound=upper_bound,$/;"	v
upper_bound	serial.py	/^    upper_bound = float(num_already_correct + num_captured_correct +$/;"	v
upper_bound	serial_lazy.py	/^                                           upper_bound=upper_bound,$/;"	v
upper_bound	serial_lazy.py	/^            upper_bound = float(num_already_correct + num_captured_correct +$/;"	v
utils	explore.py	/^import utils$/;"	i
utils	serial_gc.py	/^import utils$/;"	i
utils	viz.py	/^import utils$/;"	i
viz	hongyu.py	/^import viz$/;"	i
warm_start	explore.py	/^warm_start = False$/;"	v
warm_start	hongyu.py	/^warm_start = False$/;"	v
warm_start	serial.py	/^warm_start = True$/;"	v
warm_start	serial_gc.py	/^warm_start = False ## greedy algorithm is currently broken$/;"	v
warm_start	serial_lazy.py	/^warm_start = True$/;"	v
x	explore.py	/^x = utils.rules_to_array(rules)$/;"	v
x	serial.py	/^x = tb.tabarray(SVfile=fname, delimiter=delimiter)$/;"	v
x	serial_gc.py	/^x = tb.tabarray(SVfile=fname, delimiter=delimiter)$/;"	v
x	serial_gc.py	/^x = utils.rules_to_array(rules)$/;"	v
x	serial_lazy.py	/^x = tb.tabarray(SVfile=fname, delimiter=delimiter)$/;"	v
